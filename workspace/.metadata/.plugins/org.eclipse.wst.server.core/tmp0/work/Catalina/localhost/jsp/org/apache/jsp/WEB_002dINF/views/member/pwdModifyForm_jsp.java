/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.71
 * Generated at: 2021-10-11 07:13:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class pwdModifyForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>비밀번호 변경</title>\r\n");
      out.write("<style>\r\n");
      out.write("	.outer{\r\n");
      out.write("		width:90%;\r\n");
      out.write("		min-width : 450px;\r\n");
      out.write("		margin:auto;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.outer h1 {\r\n");
      out.write("		text-align:center;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#updatePwdForm {\r\n");
      out.write("		width : 300px;\r\n");
      out.write("		margin:auto;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.input_area {\r\n");
      out.write("	    border: solid 1px #dadada;\r\n");
      out.write("	    padding : 10px 10px 14px 10px;\r\n");
      out.write("	    background : white;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.input_area input:focus {\r\n");
      out.write("		outline: none;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.input_area input{\r\n");
      out.write("		width : 270px;\r\n");
      out.write("		height : 30px;\r\n");
      out.write("		border: 0px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.btnArea {\r\n");
      out.write("		text-align:center;\r\n");
      out.write("		padding : 30px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	button:hover {\r\n");
      out.write("		cursor:pointer\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	button {\r\n");
      out.write("		width : 100px;\r\n");
      out.write("		height : 35px;\r\n");
      out.write("		border : 0px;\r\n");
      out.write("		color:white;\r\n");
      out.write("		background:#282A35;\r\n");
      out.write("		margin : 5px;\r\n");
      out.write("		cursor : pointer;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"outer\">\r\n");
      out.write("	<h1>비밀번호 변경</h1>\r\n");
      out.write("	\r\n");
      out.write("	<form id=\"updatePwdForm\" action=\"");
      out.print( request.getContextPath() );
      out.write("/pwdModify\"\r\n");
      out.write("	method=\"post\" onsubmit=\"return checkPwd();\">\r\n");
      out.write("				<h4>현재 비밀번호</h4>\r\n");
      out.write("				<span class=\"input_area\">\r\n");
      out.write("				<input type=\"password\" name=\"userPwd\" id=\"userPwd\" maxlength=\"15\">\r\n");
      out.write("				</span>\r\n");
      out.write("				<h4>변경할 비밀번호</h4>\r\n");
      out.write("				<span class=\"input_area\">\r\n");
      out.write("				<input type=\"password\" name=\"newPwd\" id=\"newPwd\" maxlength=\"15\">\r\n");
      out.write("				</span>\r\n");
      out.write("				<h4>변경할 비밀번호 확인</h4>\r\n");
      out.write("				<span class=\"input_area\">\r\n");
      out.write("				<input type=\"password\" name=\"newPwd2\" id=\"newPwd2\" maxlength=\"15\">\r\n");
      out.write("				</span>\r\n");
      out.write("			<div class=\"btnArea\">\r\n");
      out.write("			<button id=\"updatePwdBtn\">변경하기</button>\r\n");
      out.write("			</div>\r\n");
      out.write("	</form>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script>\r\n");
      out.write("		function checkPwd(){\r\n");
      out.write("			const userPwd = document.getElementById('userPwd');\r\n");
      out.write("			const newPwd = document.getElementById('newPwd');\r\n");
      out.write("			const newPwd2 = document.getElementById('newPwd2');\r\n");
      out.write("			\r\n");
      out.write("			// 하나라도 공란으로 입력 시 alert 후 submit 하지 않음\r\n");
      out.write("			if(userPwd.value == \"\" || newPwd.value == \"\" || newPwd2.value == \"\") {\r\n");
      out.write("				alert(\"비밀번호를 입력해주세요.\");\r\n");
      out.write("				return false;\r\n");
      out.write("				\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			// 비밀번호와 비밀번호 확인의 값이 다를 시 alert 후 submit 하지 않음\r\n");
      out.write("			if(newPwd.value != newPwd2.value){\r\n");
      out.write("				alert(\"비밀번호와 비밀번호 확인이 다릅니다.\");\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			return true;\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
