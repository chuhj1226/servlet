<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>1_Servlet</title>
</head>
<body>
	<h1>어서와 Web은 처음이지?</h1>
	
	<!-- 
	
		환경 설정
		1) tomcat 설치 (dev 폴더에 압축 풀기)
		2) Eclipse의 Server Runtime Environments에서 tomcat 설치 경로 등록 (이클립스에 서버 연동)
		3) Servers 탭에서 서버 등록 (톰캣 기본 포트와 오라클 기본 포트가 동일하게 8080이므로 변경, server publicshing 체크)
		4) 인코딩 설정(UTF-8)
		5) 기타(java-ee, 파일 바로가기 생성)
		
		* Dynamic Web Project 만들기
		1) Project name : 프로젝트 이름
		2) Target runtime : 웹 어플리케이션을 실행할 서버
		3) Dynamic web module version : 서블릿 버전, 이클립스는 여기에 지정 된 버전으로 소스 코드의 문법을 검사
		4) Source folders on build path : 자바 소스 폴더
		5) Defalut output folder : 컴파일 결과 출력 폴더 (배포 폴더 안에 컴파일 된 클래스 파일이 있어야 하므로 변경)
		6) Context root : 웹 어플리케이션 이름, 기본 값은 프로젝트 이름, 웹 브라우저에서 실행 요청 시 url에서 사용
		7) Context directory : 웹 컨텐츠 파일을 저장할 작업 폴더의 이름 저장
		8) Generate ~ 체크 : 배포 서술자라고 하는 어플리케이션 전체 설정 정보를 가진 web.xml 파일 생성
	 
	 -->

	<h2>Servlet</h2>
	<p>
		서블렛이란, 웹 서비스를 위한 "자바클래스"를 말하며 자바를 사용해 웹을 만들기 위해 필요한 기술<br>
		=> 사용자의 요청을 받아 처리하고 그 결과를 다시 사용자에게 전송하는 역할의 class 파일<br>
		=> 즉, 웹에서 동적인 페이지를 java로 구현한 서버 측 프로그램(톰캣 서버에서 구동)<br>
		javax.servlet.http.HttpServlet 클래스를 상속 받음<br>
		
		다시 말해 기존의 java 파일에 웹 페이지를 구현한 html이 들어간 구조라고 볼 수 있음<br>
		클라이언트의 요청을 처리하고 그 결과를 HTML을 사용하여 요청에 대한 응답을 다시 클라이언트에게 전송하는 구현 규칙이 있음<br>
		단, Servlet에 작성 된 HTML 변경 시 Servelt을 재 컴파일 해야 한다는 단점이 있음	
	</p>
	<!-- /context Root/mapping 명칭 -->
	<form action="/1_Servlet/test" method="get">
		<button type="submit">요청</button>
	</form>
	
	<h3><a href="views/testServlet1.html">Servlet-GET 방식</a></h3>
	<h3><a href="views/testServlet2.html">Servlet-POST 방식</a></h3>
	
</body>

</html>